% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Copse.R
\name{Copse}
\alias{Copse}
\title{Create a copse, a persistent structure for holding R objects with a tree
structure.}
\usage{
Copse(db, table, ...)
}
\arguments{
\item{db}{path to sqlite database with the copse table.  This will
be created if it doesn't exist.}

\item{table}{name of sqlite table in the database.  This will be created
if it doesn't exist in \code{db}, with this schema:
\preformatted{
   CREATE TABLE <table> (
      id    INTEGER UNIQUE PRIMARY KEY,
      pid   INTEGER REFERENCES <table> (id), -- ID of parent twig, if any
      ctime FLOAT(53),                       -- twig creation time, unix timestamp
      mtime FLOAT(53),                       -- twig modification time, unix timestamp
      data  JSON                             -- JSON-serialized object data
   )
}}
}
\value{
This function creates an object of class "Copse".  It has these S3 methods:
\itemize{
\item newTwig(Copse, ..., .parent=NULL): new twig with the named items in (...), and with parent Twig .parent
\item twigWithID(Copse, TwigID): twig with given ID or NULL
\item child(Copse, Twig, n): nth child of given twig, or NULL
\item children(Copse, Twig): Twigs which are children of Twig
\item childrenWhere(Copse, Twig, expr): Twigs which are children of Twig and satisfy the expression
\item numChildren(Copse, Twig): number of children of Twig
\item parent(Copse, Twig): all Twigs which are parents to given Twig(s)
\item query(Copse, query): run an arbitrary sql query on the Copse

\item twigsWhere(Copse, expr): list of TwigIDs for which given
      expr is TRUE.  The expression is applied against the data field
      of each row.  The identifier "." stands for the item's top
      level, so the third element of a numeric vector called 'blam'
      would be represented as \code{'.$blam[3]'} in \code{expr}

\item setParent(Copse, Twig1, Twig2): set parent of Twig1 to be Twig2

\item with(Copse, expr): evaluate \code{expr} within a transaction
      on the Copse database; this provides atomic get-and-set semantics across
      processes accessing the same Copse.  If an error occurs while evaluating \code{expr},
      the transaction is rolled back.
}

Internally a Copse uses these symbols:
\itemize{
\item sql: safeSQL connection object to DB
\item db: path to db
\item table: name of table in DB
}

Twigs are S3 objects of class "Twig" with these S3 methods:
\itemize{
\item $(Twig, name): return value of name in Twig, with name an unquoted symbol
\item $<-(Twig, name, value): set value of name in Twig, with name an unquoted symbol
\item [[(Twig, name): return value of name in Twig, with name a quoted character scalar
\item [[<-(Twig, name, value): set value of name in Twig, with name a quoted character scalar
\item names(Twig): list names in Twig
\item parent(Twig): get parent Twig of Twig, or NULL if it has none
\item parent<-(Twig, Twig): set parent of Twig to Twig with ID TwigID (can pass a Twig instead):
\item child(Twig, n): get nth child of Twig, or NULL if it doesn't exist
\item children(Twig): get list of IDs of children of Twig

\item childrenWhere(Twig, expr): list of child Twigs for which
      given expr is TRUE.  The expression is applied against the
      data field of each row.  The identifier "." stands for the
      item's top level, so the third element of a numeric vector
      called 'blam' would be represented as \code{'.$blam[3]'} in
      \code{expr}

\item numChildren(Twig): get number of children of Twig
\item copse(Twig): get Copse object that owns Twig
\item mtime(Twig): twig creation time, as unix timestamp
\item ctime(Twig): twig modification time, as unix timestamp
\item blob(Twig): twig data JSON-serialized
\item setData(Twig, names, values, clearOld=FALSE): set named data items for twig; if clearOld is TRUE, delete all existing data first. As a shortcut, if values is missing, treat names as a named list, rather than a char vector of names.  Uses a single DB query to set all items.
\item delete(Twig): called only from garbage collection; reduces the use count of the real twig, dropping it from its Copse's map when the count reaches zero
}

Internally, a Twig is a numeric vector of class "Twig" with attribute Copse
being the Twig's Copse.
}
\description{
Manage collections of persistent objects.
}
\details{
This function is a factory for an S3 class ("Copse") that uses an
SQLite database to store R objects of class ("Twig") which are
related as one or more trees.  Each Twig holds a named set of
plain-old-data R objects (i.e. those representable in JSON). Twigs
get/set semantics use \code{$} and \code{$[[]]}; i.e. they work
like environments.  Each Twig's data is shared across all instances
in the workspace, and changes are recorded atomically to the SQLite
database, so that other processes also have access to them.

The copse manages these functions:
\itemize{
 \item create the database table
 \item get twigs from the DB
 \item put twigs to the DB when they change in R
 \item record timestamps for twig creation and modification
 \item ensure uniqueness of twig data
 \item garbage collect unused twigs out of the workspace
}

Changes are made atomically using SQLite locking, so that processes can
share a copse, and so twigs are always in a consistent state on disk.
}
\examples{

hats = Copse("/home/john/inventory.sqlite", "hats")
b = newTwig(hats, name="bowler", size=22, colour="black")
h = twigsWhere(hats, id < 10 || .$size > 20)  ## query can involve id, pid, mtime, ctime, or data variables selected using .$...$...[]...
h[1]
}
\author{
John Brzustowski \email{jbrzusto@REMOVE_THIS_PART_fastmail.fm}
}

