% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sgFindTags.R
\name{sgFindTags}
\alias{sgFindTags}
\title{find tags in an SG stream}
\usage{
sgFindTags(src, tagDB, resume = TRUE, par = NULL, mbn)
}
\arguments{
\item{src}{dplyr src_sqlite to receiver database}

\item{tagDB}{path to sqlite tag registration database}

\item{resume}{if TRUE, tag detection resumes where it last left off
for each given item in \code{mbn}.  Typically, a new batch of
data files arrives and is added to the receiver database using
\code{sgMergeFiles()}, and then \code{sgFindTags} is called
again to continue processing these new data.  When running
archived data retroactively, it is better to set
\code{resume=FALSE}, otherwise if bootnums are not monotonic,
then tag event histories will be scrambled leading to searching
for the wrong tags at the wrong times.  This has often been the
case for Beaglebone White receivers, since they had no internal
memory for storing the bootcount, and relied on writing it to
the SD card; updating to a new SD card would typically reset
the boot count.}

\item{par}{list of non-default parameters to the findtags code; defaults to NULL}

\item{mbn}{integer monotonic boot number(s); this is the monoBN field
from the \code{files} table in the receiver's sqlite database.}
}
\value{
the batch number and the number of tag detections in the stream.
}
\description{
A stream is the ordered sequence of raw data files from a receiver
corresponding to a single boot session (period between restarts).
This function searches for patterns of pulses corresponding to
coded ID tags and adds them to the hits, runs, batches etc. tables
in the receiver database.  Each boot session is run as a separate
batch.
}
\author{
John Brzustowski \email{jbrzusto@REMOVE_THIS_PART_fastmail.fm}
}

