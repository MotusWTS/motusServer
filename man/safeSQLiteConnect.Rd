% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/safeSQLiteConnect.R
\name{safeSQLiteConnect}
\alias{safeSQLiteConnect}
\title{open a 'safe' connection to an sqlite database}
\usage{
safeSQLiteConnect(path, create = FALSE, busyTimeout = 300,
  cacheSize = 200)
}
\arguments{
\item{path}{path to database}

\item{create}{should database be created if it doesn't already exist; default: FALSE}

\item{busyTimeout}{value for busy_timout handler, in seconds;
default: 300.  A positive value causes the function to wait
for another process to unlock the database, rather than returning
immediately with an error.}

\item{cacheSize}{size of sqlite page cache to use, in MBytes.
default: 200}
}
\value{
a DBI:dbConnection to the sqlite database, or NULL on failure
}
\description{
In this package, all connections to sqlite database files are created
by this function.
}
\details{
This avoids the locking issue with the typical use of
\code{dbConnect(RSQLite::SQLite(), ...)}, which connects and immediately
tries to set synchronous mode, unless \code{synchronous=NULL} is specified.
If the database is locked, the connection fails \emph{before \code{pragma busy_timeout}}
can be used to set a timeout handler.
}
\note{
parameters, return value, and semantics are identical to
\code{\link{dplyr::src_sqlite}} except that a locked sqlite database
will be handled gracefully with retries.
}
\author{
minor changes from dplyr::src_sqlite by John Brzustowski
}
